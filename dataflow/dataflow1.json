{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "srcgen2",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sinkgen2",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow2"
				},
				{
					"name": "flatten1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EID as string,",
				"          EName as string,",
				"          Esalary as integer '000',",
				"          Addres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"flatten1 derive(EID = concat(EID, 'that')) ~> derivedColumn1",
				"source1 alterRow() ~> alterRow2",
				"alterRow2 foldDown(unroll(),",
				"     mapColumn(",
				"          EID,",
				"          EName,",
				"          Esalary,",
				"          Addres",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          EID,",
				"          EName,",
				"          Esalary,",
				"          Addres",
				"     )) ~> sink1"
			]
		}
	}
}